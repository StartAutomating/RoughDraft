<!-- Generated with EZOut 2.0.4: Install-Module EZOut or https://github.com/StartAutomating/EZOut -->
<Types>
  <Type>
    <Name>RoughDraft.Media</Name>
    <Members>
      <AliasProperty>
        <Name>FilePath</Name>
        <ReferencedMemberName>InputPath</ReferencedMemberName>
      </AliasProperty>
      <ScriptProperty>
        <Name>Album</Name>
        <GetScriptBlock>
                        &lt;#
.SYNOPSIS
    Gets Album Metadata
.DESCRIPTION
    Gets the Album Metadata, if present.
#&gt;
param()
return $this.'.Metadata'.Album

                    </GetScriptBlock>
        <SetScriptBlock>
                        &lt;#
.SYNOPSIS
    Sets the Album Metadata
.DESCRIPTION
    Changes the Album metadata for a media file (persistently, if possible)
#&gt;
param()
$propertyToSet = @{Album="$args"}
if (-not $this.'.Metadata') {
    $this.'.Metadata' = [Ordered]@{}
}
$this.'.Metadata'.Album = $propertyToSet.album
Set-Media -Property $propertyToSet

                    </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>AlbumArtist</Name>
        <GetScriptBlock>
                        &lt;#
.SYNOPSIS
    Gets Album Metadata
.DESCRIPTION
    Gets the Album Metadata, if present.
#&gt;
param()
return $this.'.Metadata'.AlbumArtist

                    </GetScriptBlock>
        <SetScriptBlock>
                        &lt;#
.SYNOPSIS
    Sets the Album Artist Metadata
.DESCRIPTION
    Changes the Album Artist metadata for a media file (persistently, if possible)
#&gt;
param()
$propertyToSet = @{album_artist="$args"}
if (-not $this.'.Metadata') {
    $this.'.Metadata' = [Ordered]@{}
}
$this.'.Metadata'.AlbumArtist = $propertyToSet.album_artist
Set-Media -Property $propertyToSet

                    </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>AspectRatio</Name>
        <GetScriptBlock>
                        &lt;#
.SYNOPSIS
    Gets a Video or Image Aspect Ratio
.DESCRIPTION
    Gets the aspect ratio of the first video or image stream.
#&gt;
foreach ($streamInfo in $this.Streams) {
    if ($streamInfo.codec_type -ne 'video') { continue }
    if ($streamInfo.display_aspect_ratio) {
        return $streamInfo.display_aspect_ratio
    }
}

                    </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>AudioBitrate</Name>
        <GetScriptBlock>
                        &lt;#
.SYNOPSIS
    Gets Audio Bitrate
.DESCRIPTION
    Gets an Audio's Bitrate, if the information is available in any Audio stream.
#&gt;
foreach ($streamInfo in $this.Streams) {
    if ($streamInfo.codec_type -ne 'audio') { continue }
    if ($streamInfo.bit_rate) {
        return ($streamInfo.bit_rate -as [int])
    }
}
                    </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>BPM</Name>
        <GetScriptBlock>
                        &lt;#
.SYNOPSIS
    Gets BPM Metadata
.DESCRIPTION
    Gets the BPM Metadata, if present.
#&gt;
param()
if ($this.'.Metadata'.BPM) {
    return ($this.'.Metadata'.BPM -as [double])
} elseif ($this.'.Metadata'.TBPM) {
    return ($this.'.Metadata'.TBPM -as [double])
}

                    </GetScriptBlock>
        <SetScriptBlock>
                        &lt;#
.SYNOPSIS
    Sets the BPM Metadata
.DESCRIPTION
    Changes the BPM metadata for a media file (persistently, if possible)
.NOTES
    BPM is stored within the ID3 tag `TBPM`.
#&gt;
param()
$propertyToSet = @{TBPM="$args"}
if (-not $this.'.Metadata') {
    $this.'.Metadata' = [Ordered]@{}
}
$this.'.Metadata'.BPM = $propertyToSet.TBPM
Set-Media -Property $propertyToSet

                    </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>Comment</Name>
        <GetScriptBlock>
                        &lt;#
.SYNOPSIS
    Gets Comment Metadata
.DESCRIPTION
    Gets the Comment Metadata, if present.
#&gt;
param()
return $this.'.Metadata'.Comment

                    </GetScriptBlock>
        <SetScriptBlock>
                        &lt;#
.SYNOPSIS
    Sets the Comment Metadata
.DESCRIPTION
    Changes the Comment metadata for a media file (persistently, if possible)
#&gt;
param()
$propertyToSet = @{comment="$args"}
if (-not $this.'.Metadata') {
    $this.'.Metadata' = [Ordered]@{}
}
$this.'.Metadata'.Comment = $propertyToSet.comment
Set-Media -Property $propertyToSet

                    </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>Composer</Name>
        <GetScriptBlock>
                        &lt;#
.SYNOPSIS
    Gets Composer Metadata
.DESCRIPTION
    Gets the Composer Metadata, if present.
#&gt;
param()
return $this.'.Metadata'.Composer

                    </GetScriptBlock>
        <SetScriptBlock>
                        &lt;#
.SYNOPSIS
    Sets the Composer Metadata
.DESCRIPTION
    Changes the Composer metadata for a media file (persistently, if possible)
#&gt;
param()
$propertyToSet = @{composer="$args"}
if (-not $this.'.Metadata') {
    $this.'.Metadata' = [Ordered]@{}
}
$this.'.Metadata'.Composer = $propertyToSet.Composer
Set-Media -Property $propertyToSet

                    </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>Copyright</Name>
        <GetScriptBlock>
                        &lt;#
.SYNOPSIS
    Gets Copyright Metadata
.DESCRIPTION
    Gets the Copyright Metadata, if present.
#&gt;
param()
return $this.'.Metadata'.Copyright

                    </GetScriptBlock>
        <SetScriptBlock>
                        &lt;#
.SYNOPSIS
    Sets the Copyright Metadata
.DESCRIPTION
    Changes the Copyright metadata for a media file (persistently, if possible)
#&gt;
param()
$propertyToSet = @{copyright="$args"}
if (-not $this.'.Metadata') {
    $this.'.Metadata' = [Ordered]@{}
}
$this.'.Metadata'.Copyright = $propertyToSet.copyright
Set-Media -Property $propertyToSet

                    </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>CreationTime</Name>
        <GetScriptBlock>
                        &lt;#
.SYNOPSIS
    Gets Creation Time Metadata
.DESCRIPTION
    Gets the Creation Time Metadata, if present.
#&gt;
param()
if ($this.'.Metadata'.CreationTime) {
    return ($this.'.Metadata'.CreationTime -as [DateTime])
} elseif ($this.'.Metadata'.creation_time) {
    return ($this.'.Metadata'.creation_time -as [DateTime])
}


                    </GetScriptBlock>
        <SetScriptBlock>
                        &lt;#
.SYNOPSIS
    Sets the Creation Time Metadata
.DESCRIPTION
    Changes the Creation Time metadata for a media file (persistently, if possible)
#&gt;
param()

$dateTimeArgs = [DateTime]$($args[0])
$datePortion = @($dateTimeArgs.ToString('s') -split '-', 2)[0]
$propertyToSet = @{creation_time="$datePortion"}
if (-not $this.'.Metadata') {
    $this.'.Metadata' = [Ordered]@{}
}
$this.'.Metadata'.CreationTime = $propertyToSet.creation_time
Set-Media -Property $propertyToSet

                    </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>FileName</Name>
        <GetScriptBlock>
                        &lt;#
.SYNOPSIS
    Gets a media file name
.DESCRIPTION
    Gets the name of a media file
#&gt;
$this.InputPath | Split-Path -Leaf
                    </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>MediaType</Name>
        <GetScriptBlock>
                        &lt;#
.SYNOPSIS
    Gets the Media Type
.DESCRIPTION
    Gets the Media Type of a file discovered by Get-Media.
.NOTES
    Getting the Media Type also decorates the object as that media type, so that extended Audio, Video, and Image functionality are available.
.EXAMPLE
    Get-Media -InputPath .\a.mp4 |
        Select-Object -ExpandProperty MediaType
#&gt;
param()
$allCodecTypes = $this.CodecTypes -join ' '
$thisMediaType = 
    if ($allCodecTypes -eq 'audio') {
        'Audio'
    }
    elseif ($allCodecTypes -match '^video') {
        if ($this.Duration -and $this.Duration.TotalMilliseconds -gt 50) {
            'Video'
        } else {
            'Image'
        }    
    }
if ($this.pstypenames -notcontains "RoughDraft.$thisMediaType") {
    $this.pstypenames.add("RoughDraft.$thisMediaType")
}

$thisMediaType
                    </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>PixelFormat</Name>
        <GetScriptBlock>
                        &lt;#
.SYNOPSIS
    Gets a Video or Image PixelFormat
.DESCRIPTION
    Gets the pixel format the first video or image stream.
#&gt;
foreach ($streamInfo in $this.Streams) {
    if ($streamInfo.codec_type -ne 'video') { continue }
    if ($streamInfo.pix_fmt) {
        return $streamInfo.pix_fmt
    }
}



                    </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>Title</Name>
        <GetScriptBlock>
                        &lt;#
.SYNOPSIS
    Gets Title Metadata
.DESCRIPTION
    Gets the Title Metadata, if present.
#&gt;
param()
return $this.'.Metadata'.Title

                    </GetScriptBlock>
        <SetScriptBlock>
                        &lt;#
.SYNOPSIS
    Sets the Title Metadata
.DESCRIPTION
    Changes the Title metadata for a media file (persistently, if possible)
#&gt;
param()
$propertyToSet = @{title="$args"}
if (-not $this.'.Metadata') {
    $this.'.Metadata' = [Ordered]@{}
}
$this.'.Metadata'.title = $propertyToSet.title
Set-Media -Property $propertyToSet

                    </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>VideoBitrate</Name>
        <GetScriptBlock>
                        &lt;#
.SYNOPSIS
    Gets a Video's Bitrate
.DESCRIPTION
    Gets a Video's Bitrate, if the information is available in any Video stream.
#&gt;
foreach ($streamInfo in $this.Streams) {
    if ($streamInfo.codec_type -ne 'video') { continue }
    if ($streamInfo.bit_rate) {
        return ($streamInfo.bit_rate -as [int])
    }
}


                    </GetScriptBlock>
      </ScriptProperty>
    </Members>
  </Type>
</Types>